model User {
  id            String   @id
  name          String
  email         String
  emailVerified Boolean  @default(true)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  sessions Session[]
  accounts Account[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  activeOrganizationId String?

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("accounts")
}
